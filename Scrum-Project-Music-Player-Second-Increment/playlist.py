# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'playlist.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


# from PyQt5 import QtCore, QtGui, QtWidgets
# from PyQt5.QtCore import QUrl
# from PyQt5.QtWidgets import QMainWindow
from PySide2 import QtCore, QtWidgets, QtGui
from PySide2.QtCore import QAbstractListModel, QUrl, Qt
from PySide2.QtMultimedia import QMediaContent, QMediaPlaylist, QMediaPlayer
from PySide2.QtWidgets import QFileDialog, QWidget, QMainWindow

from player import Ui_MainWindow
# from player import playlist

class PlaylistModel(QAbstractListModel):
    def __init__(self, playlist, *args, **kwargs):
        super(PlaylistModel, self).__init__(*args, **kwargs)
        self.playlist = playlist

    def data(self, index, role):
        if role == Qt.DisplayRole:
            media = self.playlist.media(index.row())
            return media.canonicalUrl().fileName()

    def rowCount(self, index):
        return self.playlist.mediaCount()

class Ui_playlistWindow(QMainWindow, Ui_MainWindow):
    player = QMediaPlayer()
    playlist = Ui_MainWindow.playlist

    def __init__(self, *args, **kwargs):
        super(Ui_playlistWindow, self).__init__(*args, **kwargs)
        self.setupUi(self)
        self.setAcceptDrops(True)


        # self.player.error.connect(self.erroralert)
        self.player.play()





    def dragEnterEvent(self, e):
        if e.mimeData().hasUrls():
            e.acceptProposedAction()

    def dropEvent(self, e):
        for url in e.mimeData().urls():
            self.playlist.addMedia(
                QMediaContent(url)
            )

        self.model.layoutChanged.emit()

        # If not playing, seeking to first of newly added + play.
        if self.player.state() != QMediaPlayer.PlayingState:
            i = self.playlist.mediaCount() - len(e.mimeData().urls())
            self.playlist.setCurrentIndex(i)
            self.player.play()

    def open_file(self):
        path, _ = QFileDialog.getOpenFileName(self, "Open file", "",
                                              "mp3 Audio (*.mp3);mp4 Video (*.mp4);Movie files (*.mov);All files (*.*)")

        if path:
            self.playlist.addMedia(
                QMediaContent(
                    QUrl.fromLocalFile(path)
                )
            )

        self.model.layoutChanged.emit()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(562, 762)
        MainWindow.setMinimumSize(QtCore.QSize(562, 762))
        MainWindow.setMaximumSize(QtCore.QSize(562, 762))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/imgs/white Icons/video.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(-20, -40, 611, 811))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setMinimumSize(QtCore.QSize(611, 811))
        self.frame.setMaximumSize(QtCore.QSize(611, 811))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.frame.setFont(font)
        self.frame.setStyleSheet("#frame{\n"
"background-color:rgb(0, 13, 20);\n"
"}\n"
"QPushButton{\n"
"background: transparent;\n"
"text-align: center;\n"
"font: 75 15pt \"Comic Sans MS\";\n"
"color:  rgb(58, 180, 204);\n"
"border-radius: 30px;\n"
"}\n"
"QPushButton:hover{\n"
"    color: rgb(26, 84, 94);\n"
"}\n"
"\n"
"QLineEdit{\n"
"border: 0px;\n"
"    background: transparent;\n"
"    text-align: center;\n"
"    border: 2px solid rgb(30, 244, 255);\n"
"    width: 200px;\n"
"    outline: none;\n"
"    color: white;\n"
"    border-radius: 24px;\n"
"}\n"
"QLineEdit:focus{\n"
"width: 280px;\n"
"    border-color: 2px solid rgb(75, 255, 225);\n"
"}\n"
"")
        # self.player = QMediaPlayer()
        #
        # # self.player.error.connect(self.erroralert)
        # self.player.play()
        #
        # # Setup the playlist.
        # self.playlist = QMediaPlaylist()
        # self.player.setPlaylist(self.playlist)

        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.search = QtWidgets.QPushButton(self.frame)
        self.search.setGeometry(QtCore.QRect(480, 70, 91, 61))
        self.search.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/buttons/cyan icons/loupe.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.search.setIcon(icon1)
        self.search.setIconSize(QtCore.QSize(70, 70))
        self.search.setObjectName("search")
        self.Open = QtWidgets.QPushButton(self.frame)
        self.Open.setGeometry(QtCore.QRect(30, 70, 171, 71))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/buttons/cyan icons/folder.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Open.setIcon(icon2)
        self.Open.setIconSize(QtCore.QSize(60, 60))
        self.Open.setObjectName("Open")
        self.searchText = QtWidgets.QLineEdit(self.frame)
        self.searchText.setGeometry(QtCore.QRect(230, 80, 251, 51))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.searchText.setFont(font)
        self.searchText.setObjectName("searchText")
        self.searchText.setAcceptDrops(True)
        self.searchText.setDragEnabled(True)
        self.listView = QtWidgets.QListView(self.frame)
        self.listView.setGeometry(QtCore.QRect(60, 160, 481, 611))
        self.listView.setStyleSheet("background-color: Transparent;\n"
"border-color: rgb(0, 235, 210); color: #FFF;")
        self.listView.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.listView.setObjectName("listView")
        MainWindow.setCentralWidget(self.centralwidget)

        ############ Open File Action ##################
        self.Open.clicked.connect(self.open_file)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # self.setAcceptDrops(True)
        # Setup the playlist.
        # self.playlist = QMediaPlaylist()
        # self.player.setPlaylist(self.playlist)

        self.model = PlaylistModel(self.playlist)
        self.listView.setModel(self.model)


    # def dragEnterEvent(self, e):
    #     if e.mimeData().hasUrls():
    #         e.acceptProposedAction()
    #
    # def dropEvent(self, e):
    #     for url in e.mimeData().urls():
    #         self.playlist.addMedia(
    #             QMediaContent(url)
    #         )
    #
    #     self.model.layoutChanged.emit()
    #
    #     # If not playing, seeking to first of newly added + play.
    #     if self.player.state() != QMediaPlayer.PlayingState:
    #         i = self.playlist.mediaCount() - len(e.mimeData().urls())
    #         self.playlist.setCurrentIndex(i)
    #         self.player.play()
    #
    # def open_file(self):
    #     path, _ = QFileDialog.getOpenFileName(self, "Open file", "", "mp3 Audio (*.mp3);mp4 Video (*.mp4);Movie files (*.mov);All files (*.*)")
    #
    #     if path:
    #         self.playlist.addMedia(
    #             QMediaContent(
    #                 QUrl.fromLocalFile(path)
    #             )
    #         )
    #
    #     self.model.layoutChanged.emit()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Open.setText(_translate("MainWindow", "Open"))
import sources


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_playlistWindow(MainWindow)
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
